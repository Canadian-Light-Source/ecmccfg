
#- =================================================================================
#- SYNCHRONIZATION
#- =================================================================================
#- Commands
ecmcConfigOrDie "Cfg.SetAxisPLCEnable({{ axis.id }},{{ plc.enable|default(0)|int }})"
ecmcConfigOrDie "Cfg.SetAxisAllowCommandsFromPLC({{ axis.id }},{{ plc.externalCommands|default(0)|int }})"

#-#################################################################
#- Note
#- Rewritten to not use the python jinja here. Reasons:
#- 1. Need to be able to use macros in files and also in filename
#- 2. Get en error when plc.file is not found
#- 3. Append plc.code to plc.file
#- Conclusion: A bit nasty but works..

#- Build a file plc file of plc.file and plc.code and plc.macros

epicsEnvSet("ECMC_AX_ID_TEMP",          "{{ axis.id }}")
epicsEnvSet("ECMC_TMP_SOURCE_FILE"      "${TMP_PATH=/tmp}/PLC${ECMC_AX_ID_TEMP}_SRC.plc")
epicsEnvSet("ECMC_TMP_SOURCE_FILE_2"    "${TMP_PATH=/tmp}/PLC${ECMC_AX_ID_TEMP}_SRC_2.plc")
epicsEnvSet("ECMC_TMP_OUT_FILE",        "${TMP_PATH=/tmp}/PLC${ECMC_AX_ID_TEMP}_OUT.plc")

#- clear files (make sure no commands in files already)
system "echo '' > ${ECMC_TMP_SOURCE_FILE}"
system "echo '' > ${ECMC_TMP_OUT_FILE}"

#- Build src file plc.file + plc.code
{%- if plc.file %}
    system "cat {{ plc.file }} > ${ECMC_TMP_SOURCE_FILE}"
{%- endif %}

#- Append plc.code ( hard to handle  ''' so replace to € and switch back in shell, not nice..)
{%- if plc.code %}
    {%- for line in plc.code %}
        system "bash ${ecmccfg_DIR}appendCodeToPlc.sh '{{ line|replace('\'', '€') }}' ${ECMC_TMP_SOURCE_FILE} €"
    {%- endfor %}    
{%- endif %}

# Source plc file:
system "cat ${ECMC_TMP_SOURCE_FILE}"

#- Convert file with optional macros (msi)
ecmcFileExist("${FILE}",1)
system "msi -V -M '{{plc.macros|default('')}}' -o ${ECMC_TMP_OUT_FILE} ${ECMC_TMP_SOURCE_FILE}"

#- Printout parsed file?
ecmcEpicsEnvSetCalcTernary(ECMC_EXE_CMD, ${PRINT_PLC_FILE=1}=1,"", "#-"  )
${ECMC_EXE_CMD=""}########### Parsed PLC file:
${ECMC_EXE_CMD=""}system "cat ${ECMC_TMP_OUT_FILE}"
${ECMC_EXE_CMD=""}############ PLC file end
${ECMC_EXE_CMD=""}#
epicsEnvUnset(ECMC_EXE_CMD)

ecmcFileExist("${ECMC_TMP_OUT_FILE}",1)
ecmcConfigOrDie "Cfg.LoadAxisPLCFile(${ECMC_AX_ID_TEMP},${ECMC_TMP_OUT_FILE})"

#- Remove parsed file after load
system "rm -f ${ECMC_TMP_OUT_FILE}"
system "rm -f ${ECMC_TMP_SOURCE_FILE}"
system "rm -f ${ECMC_TMP_SOURCE_FILE}_2"
epicsEnvUnset(ECMC_AX_ID_TEMP)

#- PLC Encoder velocity filter
{%- if plc.velocity_filter.encoder is defined %}
    ecmcConfigOrDie "Cfg.SetAxisPLCEncVelFilterSize({{ axis.id }},{{ plc.velocity_filter.encoder.size|default(1)|int }})"
    ecmcConfigOrDie "Cfg.SetAxisPLCEncVelFilterEnable({{ axis.id }},{{ plc.velocity_filter.encoder.enable|default(0)|int }})"    
{%- else %}
    # WARNING: Please use updated yaml syntax for encoder velo filtering: plc.velocity_filter.encoder.x)
    {%- set filter = None if plc.filter.velocity is undefined else plc.filter.velocity %}
    ecmcConfigOrDie "Cfg.SetAxisPLCEncVelFilterSize({{ axis.id }},{{ filter.size|default(1)|int }})"
    ecmcConfigOrDie "Cfg.SetAxisPLCEncVelFilterEnable({{ axis.id }},{{ filter.enable|default(0)|int }})"
{%- endif %}

ecmcConfigOrDie "Cfg.SetAxisEncSourceType({{ axis.id }},{{ encoder.source|default(0)|int }})"


#- Move to different syntax becaosue of old bad naming
#- PLC Encoder velocity velocity filter
{%- if plc.velocity_filter.trajectory is defined %}
    ecmcConfigOrDie "Cfg.SetAxisPLCTrajVelFilterSize({{ axis.id }},{{ plc.velocity_filter.trajectory.size|default(1)|int }})"
    ecmcConfigOrDie "Cfg.SetAxisPLCTrajVelFilterEnable({{ axis.id }},{{ plc.velocity_filter.trajectory.enable|default(0)|int }})"    
{%- else %}
    # WARNING: Please use updated yaml syntax for trajectory velo filtering:  plc.velocity_filter.trajectory.x)
    {%- if plc.filter.position %}
        {%- set filter = None if plc.filter.position is undefined else plc.filter.position %}
    {%- else %}
        {%- if plc.filter.trajectory %}
            {%- set filter = None if plc.filter.trajectory is undefined else plc.filter.trajectory %}
        {%- endif %}
    {%- endif %}
    ecmcConfigOrDie "Cfg.SetAxisPLCTrajVelFilterSize({{ axis.id }},{{ filter.size|default(1)|int }})"
    ecmcConfigOrDie "Cfg.SetAxisPLCTrajVelFilterEnable({{ axis.id }},{{ filter.enable|default(0)|int }})"
{%- endif %}

ecmcConfigOrDie "Cfg.SetAxisTrajSourceType({{ axis.id }},{{ trajectory.source|default(0)|int }})"
