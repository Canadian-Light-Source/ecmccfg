###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# Move memmap object

###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
static.timeOffset:=10e6;
ec0.s${SLAVE_ID_EL2252}.TRISTATE_1:=0;
ec0.s${SLAVE_ID_EL2252}.TRISTATE_2:=0;

if(ec0.s${SLAVE_ID_EL1252}.timestampLatchPositive01!=static.oldCh1PosTime) {
  static.timeSinceLast:= (ec0.s${SLAVE_ID_EL1252}.timestampLatchPositive01-static.oldCh1PosTime); 
  println('');
  println('Current time              [ns]: ', ec_get_time());
  println('New latched positive edge [ns]: ', ec0.s${SLAVE_ID_EL1252}.timestampLatchPositive01);
  println('    Time since last latch [ns]: ', static.timeSinceLast );
  println('                          [ms]: ', static.timeSinceLast/1E6);
  println('    Lower 32 bits         [ns]: ', ec_chk_bits(ec0.s${SLAVE_ID_EL1252}.timestampLatchPositive01,0,31));
  println('    Frequency             [Hz]: ', 1e9/(static.timeSinceLast));
  ec0.s${SLAVE_ID_EL2252}.startTime:=ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01+static.timeOffset;
  ec0.s${SLAVE_ID_EL2252}.binaryOutput01:=1;
  ec0.s${SLAVE_ID_EL2252}.binaryOutput02:=0;
  ec0.s${SLAVE_ID_EL2252}.activate:=0;  
  static.triggNewOutput:=1;
  println('Trigger Output at time    [ns]:', ec0.s${SLAVE_ID_EL2252}.startTime);
}
else {
  ec0.s${SLAVE_ID_EL2252}.activate:=3;
};

if(ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01!=static.oldCh1NegTime) {
  static.timeSinceLast:= (ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01-static.oldCh1NegTime); 
  println('');
  println('Current time              [ns]: ', ec_get_time());
  println('New latched negative edge [ns]: ', ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01);
  println('    Time since last latch [ns]: ', static.timeSinceLast );
  println('                          [ms]: ', static.timeSinceLast/1E6);
  println('    Lower 32 bits         [ns]: ', ec_chk_bits(ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01,0,31));
  println('    Frequency             [Hz]: ', 1e9/(static.timeSinceLast));
  ec0.s${SLAVE_ID_EL2252}.startTime:=ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01+static.timeOffset;
  ec0.s${SLAVE_ID_EL2252}.binaryOutput01:=0;
  ec0.s${SLAVE_ID_EL2252}.binaryOutput02:=1;
  ec0.s${SLAVE_ID_EL2252}.activate:=0;
  static.triggNewOutput:=1;
  println('Trigger Output at time    [ns]:', ec0.s${SLAVE_ID_EL2252}.startTime);
}
else {
  ec0.s${SLAVE_ID_EL2252}.activate:=3;
};

static.oldCh1PosTime:=ec0.s${SLAVE_ID_EL1252}.timestampLatchPositive01;
static.oldCh1NegTime:=ec0.s${SLAVE_ID_EL1252}.timestampLatchNegative01;
static.oldstartTime:=ec0.s${SLAVE_ID_EL2252}.startTime;

