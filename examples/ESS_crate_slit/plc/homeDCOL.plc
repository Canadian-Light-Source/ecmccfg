###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# PLC Functionality Demo:
#
#   Code Description:
#     1. Enable power on axis (mc_power())
#     2. Home at startup if needed (mc_home())
#     3. Move to position 10 (mc_move_abs())
#     5. Stop sequence if limit switch violation or errorCode on motion blocks
#

var errorCode:=0;

##### 0. Put all initiations here
if(plc0.firstscan){
  println('Starting PLC0: safe homing of collimator');
  #Ignore commands during startup sequence
  ax1.blockcom:=1;
  static.seqStep:=1;
  static.cycleCounter:=0;
  static.epicsDisableSeq:=0;  #For disable over epics
  println('>>>> 1. init Axis 1');
};

if(static.epicsDisableSeq){
  static.seqStep:=100;  #invalid
};

##### 1. Checks that neither limit switch is active and puts power on axis1.
if(static.seqStep==1){
  if(not(ax1.error) and not(ax1.mon.lowlim)){
    println('>>>> ERROR: AX1 LLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax1.error) and not(ax1.mon.highlim)){
    println('>>>> ERROR: AX1 HLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax1.error)){
    errorCode=mc_power(1,1);
    if(errorCode){
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else{
    ax1.reset:=1;
  };

  if(ax1.drv.enabled){
    static.seqStep:=2;
    println('>>>> axis 1 enabled, STEP 11: moveVel triggered!');
  }
};

##### 2. Checks that neither limit switch is active and puts power on axis2.
if(static.seqStep==2){
  if(not(ax2.error) and not(ax2.mon.lowlim)){
    println('>>>> ERROR: AX2 LLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax2.error) and not(ax2.mon.highlim)){
    println('>>>> ERROR: AX2 HLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax2.error)){
    errorCode=mc_power(2,1);
    if(errorCode){
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else{
    ax2.reset:=1;
  };

  if(ax2.drv.enabled){
    static.seqStep:=3;
    println('>>>> 3. move axis to outer limit switches');
  }
};

##### 3. move Axis 1 to LLS and Axis 2 to HLS
if(static.seqStep==3){
  var axisId:=1;
  var vel:=25;
  var acc:=100;
  var dec:=500;
  if( not(mc_get_busy(1)) ){
    errorCode:=mc_move_vel(1,1,-vel,acc,dec);
    println('>>>> AX1 move towards LLS');
    if(errorCode){
      println('Error: mc_move_vel() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  };
  if( not(mc_get_busy(2)) ){
    errorCode:=mc_move_vel(2,2,vel,acc,dec);
    println('>>>> AX2 move towards HLS');
    if(errorCode){
      println('Error: mc_move_vel() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  };

  if(not(ax1.mon.lowlim) and not(ax2.mon.highlim) and not(mc_get_busy(1)) and not(mc_get_busy(2))){
    println('>>>> both axes on LS');
    mc_move_vel(1,0,vel,acc,dec);  # Set execute low
    mc_move_vel(2,0,vel,acc,dec);  # Set execute low
    static.seqStep:=4;
    println('>>>> 4. home Axis 1');
  };
}

##### 12. move Axis 1 off center towards LLS
if(static.seqStep==12){
  ax1.blockcom:=0;  #Allow EPICS control
  var posTarg:=0;
  var vel:=25;
  var acc:=100;
  var dec:=100;
  errorCode:=mc_move_abs(1,1,posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.traj.setpos==posTarg and not(mc_get_busy(1))){
    mc_move_abs(1,0,posTarg,vel,acc,dec);
    static.seqStep:=4;
    println('>>>> 4. home Axis2');  };
};

##### 21. move Axis 2 to HLS
if(static.seqStep==21){
  var axisId:=2;
  var vel:=25;
  var acc:=100;
  var dec:=500;
  if(not(mc_get_busy(axisId))){
    errorCode:=mc_move_vel(axisId,1,vel,acc,dec);
    println('>>>> AX2 move towards HLS!!!!');
    if(errorCode){
      println('Error: mc_move_vel() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  };
  if(not(ax2.mon.highlim) and not(mc_get_busy(axisId))){
    println('>>>> AX2 on HLS');
    mc_move_rel(axisId,1,-5,5,acc,dec);  # Set execute low
    static.seqStep:=3;
    println('>>>> 3. home Axis1');
  };
}

##### 4. Do homing sequence axis1 (run mc_home())
if(static.seqStep==4)
{
  var vel:=25;
  var acc:=100;
  var dec:=500;
  var homingSeq:=3;
  var velTwoardsCam:=20;
  var velOffCam:=40;
  ax1.enc.homepos:=-26.;
  errorCode=mc_home(1,1,homingSeq,velTwoardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.enc.homed and not(mc_get_busy(1))){
    println('>>>> Axis1 homed');
    mc_home(1,0,homingSeq,velTwoardsCam,velOffCam);
    static.seqStep:=41;
    println('>>>> 41. move Axis 1 to LLS');
  };
};

##### 41. move Axis 1 to LLS
if(static.seqStep==41){
  var axisId:=1;
  var vel:=25;
  var acc:=100;
  var dec:=500;
  if( not(mc_get_busy(1)) ){
    errorCode:=mc_move_vel(1,1,-vel,acc,dec);
    #println('>>>> AX1 move towards LLS');
    if(errorCode){
      println('Error: mc_move_vel() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  };

  if(not(ax1.mon.lowlim) and not(mc_get_busy(1)) ){
    println('>>>> both axes on LS');
    mc_move_vel(1,0,vel,acc,dec);  # Set execute low
    static.seqStep:=5;
    println('>>>> 5. home Axis 2');
  };
}

if(static.seqStep==5){
  var vel:=25;
  var acc:=100;
  var dec:=500;
  var homingSeq:=4;
  var velTwoardsCam:=20;
  var velOffCam:=40;
  ax2.enc.homepos:=26.;
  errorCode=mc_home(2,1,homingSeq,velTwoardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.enc.homed and not(mc_get_busy(1))){
    println('>>>> Axis2 homed');
    static.seqStep:=300;
    println('>>>> 11. move both to ZERO');
  };
};
##### 3. Trigger a absolute move
if(static.seqStep==300){
  ax1.blockcom:=0;  #Allow EPICS control
  var posTarg:=10;
  var vel:=50;
  var acc:=100;
  var dec:=100;
  errorCode:=mc_move_abs(1,1,-posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };
  errorCode:=mc_move_abs(2,1,posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };

  if( (ax1.traj.setpos==posTarg and not(mc_get_busy(1))) and (ax2.traj.setpos==posTarg and not(mc_get_busy(2))) )
  {
    static.seqStep:=0;
  };
};

if(static.seqStep==0){
  println('Disable PLC0');
  plc0.enable:=0;          # Disable PLC
};


##### 5. Disable power if any of the limits are engaged
if((static.seqStep>200 and (not(ax1.mon.lowlim) or not(ax1.mon.highlim))) or static.epicsDisableSeq or errorCode){
  errorCode=mc_power(1,0);  # kill axis 1
  if(errorCode){
    println('Function mc_power() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(not(ax1.drv.enabled)){
    println('Sequence ended by limit switch violation. ErrorCode:', errorCode);
    static.seqStep:=10;      # Sequence end
    ax1.blockcom:=0;         # Allow commands again
    plc0.enable:=0;          # Disable PLC
  };
};

return [];

println('NEVER HERE');
