###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# PLC Functionality safe homing of collimator:
#

var errorCode:=0;
var errorCode1:=0;
var errorCode2:=0;

##### 0. Put all initiations here
if(plc0.firstscan){
  println('Starting PLC0: safe homing of collimator');
  #Ignore commands during startup sequence
  ax1.blockcom:=1;
  ax2.blockcom:=1;
  static.seqStep:=1;
  static.cycleCounter:=0;
  static.epicsDisableSeq:=0;  #For disable over epics
  println('>>>> 1. init Axis 1');
};

if(static.epicsDisableSeq){
  static.seqStep:=100;  #invalid
};

##### 1. Put power on axis1 and move negative to lower LS (run mc_power())
if(static.seqStep==1){
  if(not(ax1.error) and not(ax1.mon.lowlim)){
    println('>>>> ERROR: AX1 LLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax1.error) and not(ax1.mon.highlim)){
    println('>>>> ERROR: AX1 HLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax1.error)){
    errorCode=mc_power(1,1);
    if(errorCode){
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else{
    ax1.reset:=1;
  };

  if(static.seqStep>0 and ax1.drv.enabled){
    println('>>>> axis 1 enabled');
    println('>>>> 2. init Axis 2');
    static.seqStep:=2;
  }
};

##### 2. Put power on axis2 and move negative to lower LS (run mc_power())
if(static.seqStep==2){
  if(not(ax2.error) and not(ax2.mon.lowlim)){
    println('>>>> ERROR: AX2 LLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax2.error) and not(ax2.mon.highlim)){
    println('>>>> ERROR: AX2 HLS is triggered!');
    static.seqStep:=0;
  };
  if(not(ax2.error)){
    errorCode=mc_power(2,1);
    if(errorCode){
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else{
    ax2.reset:=1;
  };

  if(ax2.drv.enabled){
    println('>>>> axis 2 enabled');
    println('>>>> 10. move axes to outer LS');
    static.seqStep:=10;
  }
};

##### 10. move axes to outer LS
if(static.seqStep==10){
  ax1.mon.lowsoftlimenable:=0;
  ax2.mon.highsoftlimenable:=0;
  var vel:=10;
  var acc:=100;
  var dec:=500;

  errorCode1:=mc_move_vel(1,1,-vel,acc,dec);
  if(errorCode1){
    println('Error: mc_move_abs() returned error: ',errorCode1);
    plc0.error:=errorCode1;
  };
  errorCode2:=mc_move_vel(2,1,vel,acc,dec);
  if(errorCode2){
    println('Error: mc_move_abs() returned error: ',errorCode2);
    plc0.error:=errorCode2;
  };

  if( not(ax1.mon.lowlim) and not(ax2.mon.highlim) and not(mc_get_busy(1)) and not(mc_get_busy(2)) ){
    errorCode1:=mc_move_vel(1,0,vel,acc,dec);
    errorCode2:=mc_move_vel(2,0,vel,acc,dec);
    println('>>>> axis1 and axis2 on LS');
    if( not(ax1.enc.homed) and not(ax2.enc.homed) ){
      println('>>>> 3. home axis 1');
      static.seqStep:=3;
    }
    if( ax1.enc.homed and not(ax2.enc.homed) ){
      println('>>>> 4. home axis 2');
      static.seqStep:=4;
    }
    if( ax1.enc.homed and ax2.enc.homed ){
      println('>>>> 5. set slit width');
      static.seqStep:=5;
    }
  };
}

##### 3. Do homing sequence axis1 (run mc_home())
if(static.seqStep==3)
{
  var homingSeq:=3;
  var velTowardsCam:=20;
  var velOffCam:=20;
  ax1.enc.homepos:=-30.5;
  errorCode=mc_home(1,1,homingSeq,velTowardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.enc.homed and not(mc_get_busy(1))){
    println('>>>> axis 1 homed');
    println('>>>> home position: ', ax1.enc.homepos);
    println('>>>> curr position: ', ax1.enc.actpos);
    println('>>>> 4. home axis 2');
    static.seqStep:=10;
  };
};

##### 4. Do homing sequence axis2 (run mc_home())
if(static.seqStep==4){
  var homingSeq:=4;
  var velTowardsCam:=20;
  var velOffCam:=20;
  ax2.enc.homepos:=30.5;
  errorCode=mc_home(2,1,homingSeq,velTowardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax2.enc.homed and not(mc_get_busy(1))){
    println('>>>> axis 2 homed');
    println('>>>> home position: ', ax2.enc.homepos);
    println('>>>> curr position: ', ax2.enc.actpos);
    static.seqStep:=5;
  };
};

##### 5. Trigger absolute move
if(static.seqStep==5){
  ax1.blockcom:=0;  #Allow EPICS control
  ax2.blockcom:=0;  #Allow EPICS control
  var posTarg:=5;
  var vel:=50;
  var acc:=100;
  var dec:=100;
  errorCode1:=mc_move_abs(1,1,-posTarg,vel,acc,dec);
  if(errorCode1){
    println('Error: mc_move_abs() returned error: ',errorCode1);
    plc0.error:=errorCode1;
  };
  errorCode2:=mc_move_abs(2,1,posTarg,vel,acc,dec);
  if(errorCode2){
    println('Error: mc_move_abs() returned error: ',errorCode2);
    plc0.error:=errorCode2;
  };

  if( ax1.traj.setpos==-posTarg and ax2.traj.setpos==posTarg and not(mc_get_busy(1)) and not(mc_get_busy(2)) )
  {
    mc_move_abs(1,0,posTarg,vel,acc,dec);  # Set execute low
    mc_move_abs(2,0,posTarg,vel,acc,dec);  # Set execute low
    static.seqStep:=0;
  };
};

if(static.seqStep==0){
  ax1.blockcom:=0;  #Allow EPICS control
  ax2.blockcom:=0;  #Allow EPICS control
  println('>>>> THE END');
  println('>>>> Ax1 position: ', ax1.enc.actpos);
  println('>>>> Ax2 position: ', ax2.enc.actpos);
  println('Disable PLC0');
  plc0.enable:=0;          # Disable PLC
};

return [];

println('NEVER HERE');
