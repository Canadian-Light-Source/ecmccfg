##############################################################################
#  See plcSyntaxHelp.plc for doc on commands.
#
#   NOTE 1: Assignment is ":=", equal is "="
#   NOTE 2: Each statement should be terminated with "|" (instaed of ";" since ";" is used as command delimiter)
#
#  Code Description:
#     1. Set interlock if trying to move passed ax1.enc.actpos>50|
#        Allow motion back again. NOTE: Better to use softlimits (same functionality)! 
#        This is just an exmple how the variables can be used.. 
#

#Create a new PLC
epicsEnvSet("ECMC_PLC_ID",        "1")
epicsEnvSet("ECMC_PLC_SAMPLE_RATE_MS","100") # execute in 10Hz
ecmcConfigOrDie "Cfg.CreatePLC(${ECMC_PLC_ID},${ECMC_PLC_SAMPLE_RATE_MS})"

#Add code
ecmcConfigOrDie "Cfg.AppendPLCExpr(${ECMC_PLC_ID})=  ec0.s2.binaryOutput07:=global.test|          "
ecmcConfigOrDie "Cfg.AppendPLCExpr(${ECMC_PLC_ID})=  plc1.enable:=plc0.enable|               "
ecmcConfigOrDie "Cfg.AppendPLCExpr(${ECMC_PLC_ID})=  ec0.s2.binaryOutput05:=not(ec0.s2.binaryOutput05)|"
ecmcConfigOrDie "Cfg.AppendPLCExpr(${ECMC_PLC_ID})=  plc1.error:=12345|                      "

#Enable PLC
ecmcConfigOrDie "Cfg.SetPLCEnable(${ECMC_PLC_ID},1)"
