###########################################################################################
############################### 
# Test of EL6022 RS422/485 communication
# This database is designed to work together with el6022.plc
#

###########################################################################################
############################### Data in/out:

record(waveform,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-ArrayIn"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Value Array [$(NELM)]")
  field(PINI, "$(PINI=1)")
  field(DTYP, "asynInt8ArrayIn")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))T_SMP_MS=-1/TYPE=asynInt8ArrayIn/ec$(MASTER_ID).s$(SLAVE_POS).mm.CH$(CH_ID)_ARRAY_IN?")
  field(FTVL, "CHAR")
  field(NELM, "$(NELM=1)")
  field(SCAN, "I/O Intr")
  field(TSE,  "$(TSE=-2)")
}

record(waveform,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-ArrayOut"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): ArrayOut [$(NELM)]")
  field(PINI, "$(PINI=1)")
  field(SCAN, "Passive")
  field(DTYP, "asynInt8ArrayOut")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynInt8ArrayOut/ec$(MASTER_ID).s$(SLAVE_POS).mm.CH$(CH_ID)_ARRAY_OUT=")
  field(FTVL, "CHAR")
  field(NELM, "$(NELM=1)")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesOut-Calc_.PROC")
}

###########################################################################################
############################### Control word:

record(calc,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesOut-Calc_"){
  field(SCAN, "Passive")
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Bytes Out Calc")
  field(INPA, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-ArrayOut.NORD")
  field(CALC, "A-1") # Remove string terminator  
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesOut-Cmd_.PROC")
}

record(longout,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesOut-Cmd_"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Bytes Out")
  field(SCAN, "Passive")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CMD=FLOAT64TOINT32/T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynFloat64/plcs.plc0.static.outBytes=")
  field(DOL,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesOut-Calc_.VAL")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Cmd-Trigg-Wrt_.PROC")
  field(OMSL, "closed_loop")
}

record(bo,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Cmd-Trigg-Wrt_"){    
  field(VAL,  "1")
  field(DESC, "$(DESC=$(HWTYPE): Trigg Write)")
  field(SCAN, "Passive")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CMD=FLOAT64TOINT32/T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynFloat64/plcs.plc0.static.triggWrite=")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  field(DOL,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-ArrayOut.NORD")
  field(OMSL, "closed_loop")
}

# Not used
record(longout,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Cmd"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Control word")
  field(PINI, "$(PINI=1)")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynInt32/ec$(MASTER_ID).s$(SLAVE_POS).CH$(CH_ID)_CONTROL=")  
}

###########################################################################################
############################### Status word:

record(mbbiDirect,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Status Word")
  field(PINI, "$(PINI=1)")
  field(VAL,  "0")
  field(DTYP, "asynUInt32Digital")
  field(INP,  "@asynMask($(PORT),$(ADDR=0),$(MASK=0xFFFFFFFF),$(TIMEOUT=1))T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynUInt32Digital/ec$(MASTER_ID).s$(SLAVE_POS).CH$(CH_ID)_STATUS?")
  field(SCAN, "I/O Intr")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-TA.PROC")
  field(TSE,  "$(TSE=-2)")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-TA"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Transmit accepted")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B0")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "NO_ALARM")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-RR.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-RR"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Receive Request")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B1")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "NO_ALARM")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-IA.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-IA"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Init Accepted")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B2")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "NO_ALARM")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-BF-Alm.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-BF-Alm"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Buffer Full")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B3")
  field(ZNAM, "Buffer OK")
  field(ONAM, "Buffer Full")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "MAJOR")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Parity-Alm.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Parity-Alm"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Parity alarm")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B4")
  field(ZNAM, "Parity OK")
  field(ONAM, "Parity Error")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "MAJOR")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Frame-Alm.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Frame-Alm"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Frame alarm")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B5")
  field(ZNAM, "Frame OK")
  field(ONAM, "Frame Error")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "MAJOR")
  field(FLNK, "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Overrun-Alm.PROC")
}

record(bi,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat-Overrun-Alm"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Overrun alarm")
  field(INP,  "$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-Stat_.B6")
  field(ZNAM, "Overrun OK")
  field(ONAM, "Overrun Error")
  field(ZSV,  "NO_ALARM")
  field(OSV,  "MAJOR")  
}

record(longin,"$(P)ec$(MASTER_ID)-s$(SLAVE_POS)-$(HWTYPE)-Serial$(CH_ID)-BytesIn-Act"){
  field(DESC, "$(HWTYPE): Serial $(CH_ID): Input byte count")
  field(PINI, "$(PINI=1)")  
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CMD=FLOAT64TOINT32/T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynFloat64/plcs.plc0.static.inBytes?")
  field(SCAN, "I/O Intr")
  field(TSE,  "$(TSE=-2)")  
}
