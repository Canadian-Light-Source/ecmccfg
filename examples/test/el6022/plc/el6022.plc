###############################################################################
#-d /**
#-d   \brief Example plc code EL6002
#-d   \details Code show how to init, write and read data over EL6022 RS422/485 slave
#-d   \author Anders Sandstroem
#-d   \file
#-d */
#
# Epics records are linked to below variables:
# static.outBytes      : Number of bytes to write
# static.InBytes       : Number of avialble bytes to read
# static.triggWrite;   : Trigg write of data by rising edge
# Input and output data are stored in EPICS waveforms (memmaps).
#

# Reset EL6002 by setting bit 2 of control word (and then clear when bit 2 of status word)
if(not(static.initdone)) {
  ec0.s$(SLAVE_ID).control${CH_ID}:=ec_set_bit(ec0.s$(SLAVE_ID).control${CH_ID},2);
  if(ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},2)) {
    ec0.s$(SLAVE_ID).control${CH_ID}:=ec_clr_bit(ec0.s$(SLAVE_ID).control${CH_ID},2);
    static.initdone:=1;
    ${DBG=#}println('Info: Init of EL6002 done!');
  }
  else {
    return [];
  };
};

if(static.outBytes<0) {
  static.outBytes:=0;
};

if(static.outBytes>22) {
  ${DBG=#}println('Error: outBytes must be in range 0..22. Current value:',static.outBytes);
  static.outBytes:=0;
};

# Check if new bytes (on toggle)
static.recReq:=ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},1);

ec0.s$(SLAVE_ID).control${CH_ID}:=ec_wrt_bits(ec0.s$(SLAVE_ID).control${CH_ID},static.outBytes,8,15);
static.inBytes:=ec_chk_bits(ec0.s$(SLAVE_ID).status${CH_ID},8,15);

if(static.triggWrite and static.initdone) {
  ec0.s$(SLAVE_ID).control${CH_ID}:=ec_flp_bit(ec0.s$(SLAVE_ID).control${CH_ID},0);
  static.triggWrite:=0;
  ${DBG=#}println('Info: Trigg Write!');
};

if(static.outBytesOld != static.outBytes) {
  ${DBG=#}println('Info: outBytes = ',static.outBytes);
};

if(static.pushAsynNextScan) {
  # Now the data should be available so lets push to epics
  ec_mm_push_asyn(${MM_ID});
  static.pushAsynNextScan:=0;
}

if(static.recReqOld != static.recReq and static.initdone) {
  println('inBytes:  ',static.inBytes);
  ec0.s$(SLAVE_ID).control${CH_ID}:=ec_flp_bit(ec0.s$(SLAVE_ID).control${CH_ID},1);
  println('Trigg Read!');
  static.pushAsynNextScan:=1;
};

static.outBytesOld:=static.outBytes;
static.inBytesOld:=static.inBytes;
static.recReqOld:=static.recReq;

return [];

# ${DBG=#}println('----------------------------------------------------');
# ${DBG=#}print('Status:   ',ec0.s$(SLAVE_ID).status${CH_ID});
# ${DBG=#}print(' (');
# ${DBG=#}ec_print_bin(ec0.s$(SLAVE_ID).status${CH_ID},0,15);
# ${DBG=#}println(')');
# ${DBG=#}println(' TA:           ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},0));
# ${DBG=#}println(' RR:           ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},1));
# ${DBG=#}println(' IA:           ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},2));
# ${DBG=#}println(' FIFO FULL:    ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},3));
# ${DBG=#}println(' PARITY ERR:   ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},4));
# ${DBG=#}println(' FRAME ERR:    ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},5));
# ${DBG=#}println(' OVERRUN ERR:  ',ec_chk_bit(ec0.s$(SLAVE_ID).status${CH_ID},6));
# ${DBG=#}println(' InBytes:      ',ec_chk_bits(ec0.s$(SLAVE_ID).status${CH_ID},8,15));
# ${DBG=#}println('');
# ${DBG=#}print('Control:  ',ec0.s$(SLAVE_ID).control${CH_ID});
# ${DBG=#}print(' (');
# ${DBG=#}ec_print_bin(ec0.s$(SLAVE_ID).control${CH_ID},0,15);
# ${DBG=#}println(')');
# ${DBG=#}println(' TR:           ',ec_chk_bit(ec0.s$(SLAVE_ID).control${CH_ID},0));
# ${DBG=#}println(' RA:           ',ec_chk_bit(ec0.s$(SLAVE_ID).control${CH_ID},1));
# ${DBG=#}println(' IR:           ',ec_chk_bit(ec0.s$(SLAVE_ID).control${CH_ID},2));
# ${DBG=#}println(' SC:           ',ec_chk_bit(ec0.s$(SLAVE_ID).control${CH_ID},3));
# ${DBG=#}println(' OutBytes:     ',ec_chk_bits(ec0.s$(SLAVE_ID).control${CH_ID},8,15));
