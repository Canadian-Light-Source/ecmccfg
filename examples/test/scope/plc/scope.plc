# PLC_MACROS:
# PLC_ID=   = Current PLC ID
# ID_EL1252 = Slave id trigger
# ID_EL3702 = Salve id AI 
# NELM      = AI oversampling factor
# RATE      = EtherCAT sampling rate in ms
# SAMPLES   = Samples to collect
# ID_MM     = Memmap id of ai input array
# ID_DS_BUF = Cont. buffer
# ID_DS_RES = Result buffer

# Description of states:
# State 0: Waiting to fill ds[ID_DS_BUF]. This is needed in order to be sure on the dataindex calculated in state 3
# State 1: Waiting for trigger. Time offset is calculated and convertded to a sample offset related to the last index in the storage.
# State 2: Ensure that enough samples have been stored after the trigger
# State 3: Copy the correct data to ds[ID_DS_RES]. Push the data to epics and then clear buffer and go to state 1.
#
# Author: Anders SandstrÃ¶m

static.oldState:=static.state;

if(plc${PLC_ID}.firstscan) {
  println('STATE 0');
  static.state:=0;
  static.dsBuffSize:=ds_get_size(${ID_DS_BUF});
  println('Starting upp. Waiting to fill buffer..')
};

# Continious feed memmap data to data storage 0
if(ec_mm_append_to_ds(${ID_MM},${ID_DS_BUF})) {
  println('Error append mm to ds');
};

##### STATE 0: Fill buffer
#Wait untill Buffer is full before accepting triggers
if(static.state==0 and ds_is_full(${ID_DS_BUF})) {
  println('Buffer full. Wait for trigger..');
  static.state:=1; # Wait for trigger
};

##### STATE 1: Wait for trigger
# Wait for trigger (positive edge on EL1252)
if(ec0.s${ID_EL1252}.CH1_LATCH_POS!=static.oldCh1PosTime and static.state==1) {
  println('STATE 1');  
  static.timeSinceLast:= (ec0.s${ID_EL1252}.CH1_LATCH_POS-static.oldCh1PosTime); 
  println('');
  println('Current time              [ns]: ', ec_get_time());
  println('New latched positive edge [ns]: ', ec0.s${ID_EL1252}.CH1_LATCH_POS);
  println('    Time since last latch [ns]: ', static.timeSinceLast );
  println('                          [ms]: ', static.timeSinceLast/1E6);
  static.el1252_L32:=ec_chk_bits(ec0.s${ID_EL1252}.CH1_LATCH_POS,0,31);
  println('    Lower 32 bits         [ns]: ', static.el1252_L32);
  println('    Frequency             [Hz]: ', 1e9/(static.timeSinceLast));
  println('Current time   l32        [ns]: ',ec_get_time_l32());
  println('Current time   u32        [ns]: ',ec_get_time_u32());
  println('Next latch time EL3702 l32[ns]: ', ec0.s${ID_EL3702}.NEXT_TIME);
  static.timeDiff:=ec0.s${ID_EL3702}.NEXT_TIME-static.el1252_L32;
  println('Diff AI vs Trigg          [ns]: ', static.timeDiff);
  static.sampleRateAIns:= 1E6*${RATE=1}/${NELM=100};
  println('SampleTimeAI              [ns]: ',static.sampleRateAIns);
  static.samplesSinceTrigg:=static.timeDiff/static.sampleRateAIns;
  println('Number of AI elements offset:   ',static.samplesSinceTrigg);
  static.state:=2;
};

##### STATE 2: Wait for enough values after tigger
if(static.state==2) {
  println('STATE 2');
 # new samples added if in state 2 for second time and on.. Increase sample counter
 if(static.oldState==2 and static.state==2) {
   static.samplesSinceTrigg:=static.samplesSinceTrigg+${NELM};
 };

 if(static.samplesSinceTrigg>=${SAMPLES}) {
   static.state:=3;
 };
};

##### STATE 3: Copy data to result data storage and push to epics. then cleanup and wait for new trigger 
if(static.state==3) {
  println('STATE 3');
  # Move the samples starting at static.samplesSinceTrigg from end
  if(ds_append_to_ds(${ID_DS_BUF},static.dsBuffSize-static.samplesSinceTrigg,${SAMPLES},${ID_DS_RES})) {
    println('Error append ds to ds');
  } else {
    println('Data push to EPICS!!');
    ds_push_asyn(${ID_DS_RES});
  };
  ds_clear_data(${ID_DS_RES});  
  # Wait for new trigger
  static.state:=1;
};

static.oldCh1PosTime:=ec0.s${ID_EL1252}.CH1_LATCH_POS;
